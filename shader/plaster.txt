// MIT License (MIT)
// Copyright (c) 2020 Patrick Seeber
//
// xs_begin
// author : '@rubikow'
// arg : { id = '0'  name = 'Random Seed'  value = '123'  range = '0 10000'  step = '1'  decimal = '2' }
// arg : { id = '1'  name = 'Density'  value = '0.3'  range = '0 1'  step = '0.1'  decimal = '2' }
// arg : { id = '2'  name = 'Additional Colors'  value = '0'  range = '-255 255'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'xmin'  value = '2'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '4'  name = 'ymin'  value = '2'  range = '0 255'  step = '1'  decimal = '0' }
// xs_end

float seed = float(iArgs[0]);
float density = float(iArgs[1]);
float colorRange = float(iArgs[2]);
float xMin = float(iArgs[3]);
float yMin = float(iArgs[4]);

float random(vec3 v){
	float n = (v.x+1.)*(v.y+1.)*(v.z+1.) + seed;

	return abs(fract(sin(sin(1./tan(mod(n,71.)) + seed * 1235.342)+cos(1./(sin(mod(n,16.))+2.) + seed * 1267.342))));
}

bool hasOneNeighbor(vec3 v){
	int count = 0;
	if(voxel(v+vec3(1,0,0)) > 0.) count++;
	if(voxel(v+vec3(0,1,0)) > 0.) count++;
	if(voxel(v+vec3(-1,0,0)) > 0.) count++;
	if(voxel(v+vec3(0,-1,0)) > 0.) count++;
	return count == 1;
}

bool hasNeighbors(vec3 v){
	int count = 0;
	if(voxel(v+vec3(1,0,0)) > 0.) count++;
	if(voxel(v+vec3(0,1,0)) > 0.) count++;
	if(voxel(v+vec3(-1,0,0)) > 0.) count++;
	if(voxel(v+vec3(0,-1,0)) > 0.) count++;
	return count > 0;
}

bool hasZNeighbors(vec3 v){
	int count = 0;	
	if(voxel(v+vec3(0,0,-1)) > 0. && voxel(v+vec3(0,0,1)) == 0.) count++;
	if(voxel(v+vec3(0,0,1)) > 0. && voxel(v+vec3(0,0,-1)) == 0.) count++;
	return count > 0;
}

float map(vec3 v) {

	float color =  voxel(v);

	if(hasZNeighbors(v)){
			float yLen = yMin + floor(random(vec3(floor(v.x/xMin),floor((v.y)/7.),v.z))*7.);
			float xShift = floor(random(vec3(floor(v.x/xMin),floor(v.y/yLen),v.z)) * 2.);
			if(random(vec3(floor((v.x+xShift)/xMin),floor(v.y/(yLen)),0.)) < density){		
				if(colorRange > 0){
					color = i_color_index + mod(floor(v.x/xMin)*floor(v.y/7.)+floor(random(vec3(floor(v.x/xMin),floor((v.y)/7.),v.z))*5.),colorRange);
				}else{
					color = i_color_index;
				}
			}	
	}
	return color;
}