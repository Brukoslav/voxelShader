// MIT License (MIT)
// Copyright (c) 2020 Patrick Seeber
//
// xs_begin
// author : '@rubikow'
// arg : { id = '0'  name = 'Max Volume'  value = '3'  range = '0 100'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Random Seed'  value = '123'  range = '0 10000'  step = '1'  decimal = '2' }
// arg : { id = '2'  name = 'Allow Roofs'  value = '0'  range = '0 1'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Density'  value = '0.3'  range = '0 1'  step = '0.01'  decimal = '3' }
// arg : { id = '4'  name = 'Mode'  value = '0'  range = '0 1'  step = '1'  decimal = '0' }
// xs_end

float thickness = float(iArgs[0]);
float seed = float(iArgs[1]);
bool allowRoof = float(iArgs[2]) > 0.;
float density = float(iArgs[3]);
float mode = float(iArgs[4]);

float random(vec3 v){
	float n = (floor(v.x/thickness)+1.)*(floor(v.y/thickness)+1.) + seed;

	return abs(fract(sin(1./tan(n) + seed * 1235.342)));
}

bool hasOneNeighbor(vec3 v){
	int count = 0;
	if(voxel(v+vec3(1,0,0)) > 0.) count++;
	if(voxel(v+vec3(0,1,0)) > 0.) count++;
	if(voxel(v+vec3(-1,0,0)) > 0.) count++;
	if(voxel(v+vec3(0,-1,0)) > 0.) count++;
	return count == 1;
}

bool hasNeighbors(vec3 v){
	int count = 0;
	if(voxel(v+vec3(1,0,0)) > 0.) count++;
	if(voxel(v+vec3(0,1,0)) > 0.) count++;
	if(voxel(v+vec3(-1,0,0)) > .0) count++;
	if(voxel(v+vec3(0,-1,0)) > 0.) count++;
	return count == 3;
}

float fround(float f){
	return float(round(f));
}

float map(vec3 v) {
	
	if(random(v) < density){
		if(mode == 0.){
			if(hasNeighbors(v) && mod(v.y+i_volume_size.y,2.) == mod(fround(abs(sin(v.x)*i_volume_size.y))+0.5,2.)){		
					return 0.;			
			}else if(hasNeighbors(v) && mod(v.x+i_volume_size.x,2.) == mod(fround(abs(sin(v.y)*i_volume_size.x))+0.5,2.)){		
					return 0.;			
			}else if(allowRoof && voxel(v+vec3(0,0,-1)) > 0. && voxel(v+vec3(0,0,1)) == 0. && mod(v.z+i_volume_size.z,2.) == mod(fround(abs(sin(v.x)*i_volume_size.z))+0.5,2.)){		
					return 0.;			
			}
		}else{
			if(hasNeighbors(v) && mod(v.z+i_volume_size.z,2.) == mod(fround(abs(sin(floor(v.x/thickness)+floor(v.y/thickness))*i_volume_size.z))+0.5,2.)){		
					return 0.;			
			}else if(allowRoof && voxel(v+vec3(0,0,-1)) > 0. && voxel(v+vec3(0,0,1)) == 0. && mod(v.z+i_volume_size.z,2.) == mod(fround(abs(sin(v.x)*i_volume_size.z))+0.5,2.)){		
					return 0.;			
			}
		}
	}	
	
	return voxel(v);	
}